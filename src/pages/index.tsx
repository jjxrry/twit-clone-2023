import { SignIn, SignInButton, useUser } from "@clerk/nextjs";
import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { RouterOutputs, api } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime)

const CreatePostWizard = () => {

  const { user } = useUser();

  if (!user) return null;

  return (<div className="flex gap-4 w-full">
    <Image 
      src={ user.imageUrl } 
      alt="profile image" 
      className="w-14 h-14 rounded-full"
      width={56}
      height={56}
    />
    <input 
      placeholder="Tweet something!" 
      className="bg-transparent grow outline-none"
    />
  </div>
  )
}


type PostWithUser = RouterOutputs['posts']['getAll'][number];
const PostView = (props: PostWithUser) => {
  const {post, author} = props;
  return (
    <div key={post.id} className=" flex border-b border-slate-400 p-4 gap-3">
      <Image 
        className="h-14 w-14 rounded-full" 
        src={author.imageUrl} 
        alt={`@${author.username}'s profile picture`}
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex gap-1 text-slate-400">
          <span>{`@${author.username}`}</span>
          <span className="font-thin">
            {` Â· ${dayjs(post.createdAt).fromNow()}`} 
          </span>
        </div>
        <span>{post.content}</span>
      </div>
    </div>
  )
}



const Home: NextPage = () =>{

  const user = useUser()
  const { data, isLoading } = api.posts.getAll.useQuery()

  if (isLoading) return <div>Loading...</div>
  if (!data) return <div>Something went wrong!</div>


  return (
    <>
      <Head>
        <title>CRUD-tastic!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">

            {/* Render Sign In/Sign Out buttons based on user state */}
            {!user.isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )} 
            {user.isSignedIn && <CreatePostWizard/>}

          </div>
          <div>
            {/* this array that is being mapped is an array, 
            the first argument is the database data, 
            the second is the data that will be changed later (TEMP FIX) 
            changed from "data?" ternary to allow for multiple tweets to show*/}
            {[...data, ...data]?.map((fullPost) => (
              <PostView {...fullPost} key={fullPost.post.id}/>
            ))}
          </div>
        </div>
        <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up"/>
      </main>
    </>
  )
}

export default Home