import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";

const ProfileFeed = (props: {userid: string}) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({
    userId: props.userid,
  })

  if (isLoading) return <LoadingPage/>

  if (!data || data.length === 0) return <div className="p-4 text-xl">No posts yet</div>

  return <div className="flex flex-col">
    {data.map(fullPost => (
      <PostView {...fullPost} key={fullPost.post.id} />))}
  </div>
}

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUserName.useQuery({
    username,
  })

  if (!data) return <div>404</div>

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative bg-slate-600 h-36">
          <Image 
            src={data.imageUrl} 
            alt={`${data.username}'s profile picture`} 
            width={128}
            height={128}

            className="rounded-full absolute bottom-0 left-0 -mb-[68px] ml-4 border-black border-4"
          />
        </div>
        <div className="h-[64px]"></div>
        <div className="p-4 px-8 text-2xl font-bold">
          {`@${data.username ?? ""}`}
        </div>
        <div className="border-b border-slate-400 w-full"></div>
        <ProfileFeed userid={data.id}/>
      </PageLayout>
    </>
  )
}

import { createServerSideHelpers } from '@trpc/react-query/server';
import { appRouter } from '~/server/api/root';
import { prisma } from '~/server/db';
import superjson from 'superjson';
import { PageLayout } from "~/components/layout";
import LoadingPage from "~/components/loading";
import { PostView } from "~/components/postview";


export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: {prisma, userID: null},
    transformer: superjson, // optional - adds superjson serialization
  })

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("no slug")

  const username = slug.replace('@', '');

  await ssg.profile.getUserByUserName.prefetch({ username })

  return{
    props: {
      trpcState: ssg.dehydrate(),
      username,
    }
  }
}

export const getStaticPaths = () => {
  return { paths: [], fallback: 'blocking'}
}

export default ProfilePage